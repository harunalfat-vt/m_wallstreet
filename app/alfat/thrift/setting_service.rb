#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift/setting_types'

module Thrift
  module SettingService
    class Client
      include ::Thrift::Client

      def create_setting(s)
        send_create_setting(s)
        return recv_create_setting()
      end

      def send_create_setting(s)
        send_message('create_setting', Create_setting_args, :s => s)
      end

      def recv_create_setting()
        result = receive_message(Create_setting_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_setting failed: unknown result')
      end

      def update_setting(s)
        send_update_setting(s)
        return recv_update_setting()
      end

      def send_update_setting(s)
        send_message('update_setting', Update_setting_args, :s => s)
      end

      def recv_update_setting()
        result = receive_message(Update_setting_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_setting failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_create_setting(seqid, iprot, oprot)
        args = read_args(iprot, Create_setting_args)
        result = Create_setting_result.new()
        result.success = @handler.create_setting(args.s)
        write_result(result, oprot, 'create_setting', seqid)
      end

      def process_update_setting(seqid, iprot, oprot)
        args = read_args(iprot, Update_setting_args)
        result = Update_setting_result.new()
        result.success = @handler.update_setting(args.s)
        write_result(result, oprot, 'update_setting', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Create_setting_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      S = 1

      FIELDS = {
        S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => ::Thrift::Setting}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Create_setting_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Thrift::Result}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Update_setting_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      S = 2

      FIELDS = {
        S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => ::Thrift::Setting}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Update_setting_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Thrift::Result}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
